import os , logging
import sys
import threading

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from contextlib import asynccontextmanager

from agents.agent_runner import run_support_agent
from agents.knowledge import watch_folder
from logs import logger


sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))


class Query(BaseModel):
    """
    Pydantic model for user query
    """
    user_query: str

@asynccontextmanager
async def lifespan(app: FastAPI):
    """This will create thread and will check for documents updates.
    """
    logger.info("Starting background thread for watching document folder.")
    thread = threading.Thread(target=watch_folder, daemon=True)
    thread.start()
    yield
    logger.info("Application shutdown initiated.")

# Initializing FastAPI app    
app = FastAPI(
    title="Support Agent API",
    version="1.0.0",
    description="API for processing user queries with a support agent",
    lifespan=lifespan
)

@app.post("/support", summary="Handle user support queries")
def get_support(query: Query):
    """
    Process a support query using the AI agent.
    Args:
        query (Query): User input wrapped in a Pydantic model.
    Returns:
        dict: Result generated by the support agent.
    """
    try:
        logger.info(f"Received query: {query.user_query}")
        result = run_support_agent(query.user_query)
        return result 
    except Exception:
        logger.error("Error while processing query", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal server error")